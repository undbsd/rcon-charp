using Rcon.Events;
using System;

namespace Rcon
{
    /// <summary>
    /// Represents the method that will handle an event when the event provides data.
    /// </summary>
    /// <typeparam name="TReturn">Return type.</typeparam>
    /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An object that contains the event data.</param>
    public delegate TReturn ReturnEventHandler<TReturn, TEventArgs>(object sender, TEventArgs e);

    /// <summary>
    /// RCON Server interface
    /// </summary>
    public interface IRconServer : IDisposable
    {
        /// <summary>
        /// RCON Password
        /// </summary>
        string Password { get; }

        /// <summary>
        /// Triggered when someone connects to the server
        /// </summary>
        event EventHandler<ClientConnectedEventArgs> OnClientConnected;

        /// <summary>
        /// Triggered when connected client disconnects from the server
        /// </summary>
        event EventHandler<ClientDisconnectedEventArgs> OnClientDisconnected;

        /// <summary>
        /// Triggered when connected client authenticates successfully
        /// </summary>
        event EventHandler<ClientAuthenticatedEventArgs> OnClientAuthenticated;

        /// <summary>
        /// Triggered when client sent a packet to the server
        /// </summary>
        event EventHandler<ClientSentPacketEventArgs> OnClientPacketReceived;

        /// <summary>
        /// Triggered when received packet from the client is SERVERDATA_EXECCOMMAND.
        /// This should return response packet body (SERVERDATA_RESPONSE_VALUE)
        /// </summary>
        event ReturnEventHandler<string, ClientSentCommandEventArgs> OnClientCommandReceived;

        /// <summary>
        /// Start server asynchronously
        /// </summary>
        void StartAsync();

        /// <summary>
        /// Start server synchronously (Like StartAsync, but will lock current execution state)
        /// </summary>
        void Start();
    }
}
